<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:local="clr-namespace:WpfApp1"
                    xmlns:custom="clr-namespace:WpfApp1.component">
    <!--test-->
    <Style x:Key="testBorder" TargetType="{x:Type Border}">
        <Setter Property="Padding" Value="20"></Setter>
    </Style>


    <!--默认的字体-->
    <sys:Double x:Key="DefFontSize">30</sys:Double>
    <sys:Double x:Key="DisableOpacity">0.6</sys:Double>
    <!--默认的字体大小-->
    <!--颜色值-->
    <SolidColorBrush x:Key="ColorGrey333" Color="#333"/>
    <SolidColorBrush x:Key="ColorGrey555" Color="#555"/>
    <SolidColorBrush x:Key="ColorGreyDDD" Color="#DDD"/>
    <SolidColorBrush x:Key="ColorGreyBBB" Color="#BBB"/>
    <SolidColorBrush x:Key="ColorGreyE6E6E6" Color="#E6E6E6"/>
    <SolidColorBrush x:Key="ColorGreyF5F5F5" Color="#F5F5F5"/>
    <SolidColorBrush x:Key="ColorGreyF9F9F9" Color="#F9F9F9"/>
    <SolidColorBrush x:Key="ColorGreyFBFBFB" Color="#FBFBFB"/>
    <SolidColorBrush x:Key="ColorWhite" Color="#FFF"/>
    <SolidColorBrush x:Key="ColorBlueOver" Color="#48B2FF" />
    <SolidColorBrush x:Key="ColorBlue" Color="#1E9FFF" />
    <SolidColorBrush x:Key="ColorGreenOver" Color="#74C474" />
    <SolidColorBrush x:Key="ColorGreen" Color="#5EB95E" />
    <SolidColorBrush x:Key="ColorGreenDarkOver" Color="#15AA9D" />
    <SolidColorBrush x:Key="ColorGreenDark" Color="#009688" />
    <SolidColorBrush x:Key="ColorOrangeOver" Color="#F58B3B" />
    <SolidColorBrush x:Key="ColorOrange" Color="#FF5722" />
    <SolidColorBrush x:Key="ColorRedOver" Color="#E56764" />
    <SolidColorBrush x:Key="ColorRed" Color="#DD514C" />
    <SolidColorBrush x:Key="ColorYellowOver" Color="#F5D171" />
    <SolidColorBrush x:Key="ColorYellow" Color="#F0C044" />
    <SolidColorBrush x:Key="ColorBlueBlack" Color="#0D648D" />
    <SolidColorBrush x:Key="ColorBlueDark" Color="#3D94BD" />

    <!--日期样式-->
    <!--头部星期信息-->
    <sys:String x:Key="Dateformat">yyyy-MM-dd</sys:String>
    <sys:Double x:Key="DateHeaderSize">18</sys:Double>
    <SolidColorBrush x:Key="DateHeaderBackground" Color="#FBFBFB"></SolidColorBrush>
    <SolidColorBrush x:Key="DateHeaderForeground" Color="#555"/>
    <SolidColorBrush x:Key="DateHeaderOverForeground" Color="#009688"/>
    <SolidColorBrush x:Key="DateHeaderBorderBottomColor" Color="#ccc"/>
    <!--字体大小-->
    <sys:Double x:Key="DateDaySize">15</sys:Double>
    <SolidColorBrush x:Key="DateWeekForeground" Color="#000"></SolidColorBrush>
    <!--标题header-->
    <Style x:Key="baseHeader" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="黑体"></Setter>
        <Setter Property="FontWeight" Value="Bold"></Setter>
        <Setter Property="Foreground" Value="#fff"></Setter>
        <Setter Property="Background" Value="#333"></Setter>
        <Setter Property="Padding" Value="20 10"></Setter>
    </Style>
    <Style x:Key="largeHeader" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource baseHeader}">
        <Setter Property="FontSize" Value="24"></Setter>
    </Style>
    <Style x:Key="normalHeader" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource baseHeader}">
        <Setter Property="FontSize" Value="20"></Setter>
    </Style>
    <Style x:Key="smallHeader" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource baseHeader}">
        <Setter Property="FontSize" Value="16"></Setter>
    </Style>

    <!--字体图标-->
    <Style x:Key="iconfont" TargetType="{x:Type TextBlock}">
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="FontFamily" Value="pack://application:,,,/resources/iconfont/#iconfont"></Setter>
    </Style>


    <!--自定义按钮模板-->
    <ControlTemplate x:Key="FButton_Template" TargetType="{x:Type custom:FButton}">
        <Border x:Name="border" Margin="0.1"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= Background}" 
                                Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Height}" 
                                CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CornerRadius}" 
                                Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Width}">
            <!--Icon/Text-->
            <StackPanel Orientation="Horizontal" VerticalAlignment="Center"
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                <TextBlock x:Name="icon"
                           Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FIconMargin}" 
                           RenderTransformOrigin="0.5,0.5" Style="{StaticResource iconfont}"
                           Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= FIcon}" 
                           FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= FIconSize}" 
                           Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= Foreground}">
                    <TextBlock.RenderTransform>
                        <RotateTransform x:Name="transIcon" Angle="0"/>
                    </TextBlock.RenderTransform>
                </TextBlock>
                <TextBlock VerticalAlignment="Center"  x:Name="txt" Padding="0 0 0 0"
                           TextDecorations="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ContentDecorations}" 
                           Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}" 
                           FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FontSize}" 
                           Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}">
                </TextBlock>
            </StackPanel>
        </Border>
        <!--触发器-->
        <ControlTemplate.Triggers>
            <!--设置鼠标进入时的背景、前景样式-->
            <Trigger Property="FIcon" Value="{x:Null}">
                <Setter TargetName="icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
                <Setter TargetName="icon" Property="Margin" Value="0" />
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverBackground}" TargetName="border" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},
                                Path=MouseOverBorderBrush}" TargetName="border"></Setter>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverForeground}" TargetName="icon"/>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverForeground}" TargetName="txt"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverBackground}" TargetName="border" />
                <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},
                                Path=PressBorderBrush}" TargetName="border"></Setter>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverForeground}" TargetName="icon"/>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=MouseOverForeground}" TargetName="txt"/>
            </Trigger>
            <!--Ficon的动画触发器-->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="true"></Condition>
                    <Condition Property="AllowsAnimation" Value="true"></Condition>
                </MultiTrigger.Conditions>
                <MultiTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="360" Duration="0:0:0.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.EnterActions>
                <MultiTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="transIcon" Storyboard.TargetProperty="Angle" To="0" Duration="0:0:0.5" />
                        </Storyboard>
                    </BeginStoryboard>
                </MultiTrigger.ExitActions>
            </MultiTrigger>
            <!--鼠标按下时的前景、背景样式-->
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedBackground}" TargetName="border" />
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="icon"/>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                Path=PressedForeground}" TargetName="txt"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5" TargetName="border"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--按钮基本样式-->
    <Style x:Key="baseButton" TargetType="{x:Type custom:FButton}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="13" />
        <Setter Property="CornerRadius" Value="0" />
        <Setter Property="FIconSize" Value="16" />
        <Setter Property="Template" Value="{StaticResource FButton_Template}"/>
        <Setter Property="Padding" Value="15 5" />
        <Setter Property="Content" Value="{x:Null}" />
        <Setter Property="FIconMargin" Value="0,0,8,0" />

    </Style>

    <!--默认按钮-->
    <Style TargetType="{x:Type custom:FButton}" BasedOn="{StaticResource baseButton}">
        <Setter Property="BorderBrush" Value="{StaticResource ColorGreyDDD}"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="Background" Value="{StaticResource ColorWhite}" />
        <Setter Property="Foreground" Value="{StaticResource ColorGrey555}" />
        <Setter Property="MouseOverBackground" Value="{StaticResource ColorWhite}" />
        <Setter Property="MouseOverForeground" Value="{StaticResource ColorGreenDark}" />
        <Setter Property="MouseOverBorderBrush" Value="{StaticResource ColorOrange}"></Setter>
        <Setter Property="PressedBackground" Value="{StaticResource ColorWhite}" />
        <Setter Property="PressedForeground" Value="{StaticResource ColorGreenDark }" />
        <Setter Property="PressBorderBrush" Value="{StaticResource ColorGreenDark}"></Setter>
    </Style>

    <!--导航按钮-->
    <Style x:Key="navButton" TargetType="{x:Type custom:FButton}" BasedOn="{StaticResource baseButton}">
        <Setter Property="Background" Value="{StaticResource ColorGreenDark}" />
        <Setter Property="Foreground" Value="{StaticResource ColorWhite}" />
        <Setter Property="MouseOverBackground" Value="{StaticResource ColorGreenDarkOver}" />
        <Setter Property="MouseOverForeground" Value="{StaticResource ColorWhite}" />
        <Setter Property="PressedBackground" Value="{StaticResource ColorGreenDarkOver}" />
        <Setter Property="PressedForeground" Value="{StaticResource ColorWhite }" />
    </Style>

    <!--背景透明按钮-->
    <Style x:Key="FButton_Transparency" TargetType="{x:Type custom:FButton}" BasedOn="{StaticResource baseButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource ColorWhite}" />
        <Setter Property="MouseOverBackground" Value="Transparent" />
        <Setter Property="MouseOverForeground" Value="{StaticResource ColorYellowOver}" />
        <Setter Property="PressedBackground" Value="Transparent" />
        <Setter Property="PressedForeground" Value="{StaticResource ColorYellowOver}" />
        <Setter Property="Cursor" Value="Hand" />
    </Style>
    <!--信息按钮-->
    <Style x:Key="infoButton" TargetType="{x:Type custom:FButton}" BasedOn="{StaticResource baseButton}">
        <Setter Property="Background" Value="{StaticResource ColorBlue}" />
        <Setter Property="Foreground" Value="{StaticResource ColorWhite}" />
        <Setter Property="MouseOverBackground" Value="{StaticResource ColorBlueOver}" />
        <Setter Property="MouseOverForeground" Value="{StaticResource ColorWhite}" />
        <Setter Property="PressedBackground" Value="{StaticResource ColorBlueOver}" />
        <Setter Property="PressedForeground" Value="{StaticResource ColorWhite }" />
    </Style>
    <!--成功按钮-->
    <Style x:Key="successButton" TargetType="{x:Type custom:FButton}" BasedOn="{StaticResource baseButton}">
        <Setter Property="Background" Value="{StaticResource ColorGreen}" />
        <Setter Property="Foreground" Value="{StaticResource ColorWhite}" />
        <Setter Property="MouseOverBackground" Value="{StaticResource ColorGreenOver}" />
        <Setter Property="MouseOverForeground" Value="{StaticResource ColorWhite}" />
        <Setter Property="PressedBackground" Value="{StaticResource ColorGreenOver}" />
        <Setter Property="PressedForeground" Value="{StaticResource ColorWhite }" />
    </Style>
    <!--警告按钮-->
    <Style x:Key="warnButton" TargetType="{x:Type custom:FButton}" BasedOn="{StaticResource baseButton}">
        <Setter Property="Background" Value="{StaticResource ColorOrange}" />
        <Setter Property="Foreground" Value="{StaticResource ColorWhite}" />
        <Setter Property="MouseOverBackground" Value="{StaticResource ColorOrangeOver}" />
        <Setter Property="MouseOverForeground" Value="{StaticResource ColorWhite}" />
        <Setter Property="PressedBackground" Value="{StaticResource ColorOrangeOver}" />
        <Setter Property="PressedForeground" Value="{StaticResource ColorWhite }" />
    </Style>
    <!--红色按钮-->
    <Style x:Key="dangerButton" TargetType="{x:Type custom:FButton}" BasedOn="{StaticResource baseButton}">
        <Setter Property="Background" Value="{StaticResource ColorRed}" />
        <Setter Property="Foreground" Value="{StaticResource ColorWhite}" />
        <Setter Property="MouseOverBackground" Value="{StaticResource ColorRedOver}" />
        <Setter Property="MouseOverForeground" Value="{StaticResource ColorWhite}" />
        <Setter Property="PressedBackground" Value="{StaticResource ColorRedOver}" />
        <Setter Property="PressedForeground" Value="{StaticResource ColorWhite }" />
    </Style>

    <!--自定义文本框 FTextBox模板-->
    <ControlTemplate x:Key="FTextBox_Template" TargetType="{x:Type custom:FTextBox}">
        <Grid x:Name="PART_ROOT">
            <Border x:Name="Bg"
                    Margin="0"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Background="{TemplateBinding Background}"
                    Width="{TemplateBinding Width}"
                    CornerRadius="0">
                <Grid x:Name="PART_InnerGrid">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition  Width="Auto"/>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition  Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <!--Label区域-->
                    <Border Grid.Column="0" x:Name="Label"
                               Margin="0"
                               Padding="10 0"
                               Visibility="Visible"
                               BorderThickness="0 0 1 0"
                               BorderBrush="{TemplateBinding BorderBrush}"
                               Width="auto"
                               Height="{TemplateBinding Height}"
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               CornerRadius="0"
                               Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=LabelBackground}">
                        <TextBlock FontSize="{TemplateBinding FontSize}"
                               Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=LabelForeground}"
                               VerticalAlignment="Center"
                               Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=LabelText}">
                        </TextBlock>
                    </Border>
                    <!--内容区域-->
                    <ScrollViewer Grid.Column="1" x:Name="PART_ContentHost" BorderThickness="0" IsTabStop="False"
                             Margin="0"
                             Cursor="{TemplateBinding Cursor}"
                             VerticalAlignment="Center" Background="{x:Null}">

                    </ScrollViewer>
                    <!--水印-->
                    <TextBlock Grid.Column="1" x:Name="Message"
                               Visibility="Collapsed"
                               Margin="{TemplateBinding Padding}"
                               Padding="0"
                               Background="Transparent"
                               HorizontalAlignment="Left"
                               VerticalAlignment="Center"
                               FontSize="{TemplateBinding FontSize}"
                               Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=WaterMarkBrush}"
                               Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=WaterMark}"></TextBlock>
                    <!--附加内容区域-->
                    <TextBlock Grid.Column="2" x:Name="TextIcon"
                               Visibility="Visible"
                               Width="auto"
                               Height="{TemplateBinding Height}"
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               Foreground="{TemplateBinding Foreground}"
                               Style="{StaticResource iconfont}"
                               Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=TextFIcon}"
                               FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=TextFIconSize}"
                               Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=TextFIconMargin}"></TextBlock>
                </Grid>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=Text}" Value="">
                <Setter TargetName="Message" Property="Visibility" Value="Visible" />
            </DataTrigger>
            <Trigger Property="TextFIcon" Value="{x:Null}">
                <Setter TargetName="TextIcon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="LabelText" Value="{x:Null}">
                <Setter TargetName="Label" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="Bg" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=MouseOverBrush}"/>
                <Setter TargetName="Label" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=MouseOverBrush}"></Setter>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter TargetName="Bg" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=MousePressBrush}"/>
                <Setter TargetName="Label" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=MousePressBrush}"></Setter>
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--自定义文本框基本样式-->
    <Style x:Key="baseFTextBox" TargetType="{x:Type custom:FTextBox}">
        <Setter Property="Template" Value="{StaticResource FTextBox_Template}"></Setter>
        <Setter Property="Padding" Value="5 5"></Setter>
        <Setter Property="MinWidth" Value="60"></Setter>
        <Setter Property="MinHeight" Value="24"></Setter>
        <Setter Property="Width" Value="120"></Setter>
        <Setter Property="Height" Value="28"></Setter>
        <Setter Property="FontSize" Value="13"></Setter>
        <Setter Property="BorderBrush" Value="{StaticResource ColorGreyBBB}"></Setter>
        <Setter Property="Background" Value="#FFF"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="MouseOverBrush" Value="{StaticResource ColorBlueDark}"></Setter>
        <Setter Property="MousePressBrush" Value="{StaticResource ColorRed}"></Setter>
        <Setter Property="Foreground" Value="{StaticResource ColorGrey333}"></Setter>
        <Setter Property="LabelForeground" Value="{StaticResource ColorGrey333}"></Setter>
        <Setter Property="LabelBackground" Value="{StaticResource ColorGreyF9F9F9}"></Setter>
    </Style>

    <Style TargetType="{x:Type custom:FTextBox}" BasedOn="{StaticResource baseFTextBox}">
        <Setter Property="FontSize" Value="14"></Setter>
        <Setter Property="Height" Value="28"></Setter>
    </Style>
    <Style x:Key="smallFTextBox" TargetType="{x:Type custom:FTextBox}" BasedOn="{StaticResource baseFTextBox}">
        <Setter Property="FontSize" Value="12"></Setter>
        <Setter Property="Height" Value="26"></Setter>
    </Style>
    <Style x:Key="largeFTextBox" TargetType="{x:Type custom:FTextBox}" BasedOn="{StaticResource baseFTextBox}">
        <Setter Property="FontSize" Value="16"></Setter>
        <Setter Property="Height" Value="32"></Setter>
    </Style>

    <!--复选框模板-->
    <ControlTemplate x:Key="FCheckBox_Template" TargetType="{x:Type custom:FCheckBox}">
        <StackPanel x:Name="stackpanel"  
                    Margin="{TemplateBinding Margin}"
                    Orientation="Horizontal" VerticalAlignment="Center">
            <TextBlock x:Name="icon"
                       Style="{StaticResource  iconfont}"
                       Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=FIcon}"
                       FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=FIconSize}"
                       Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=FIconMargin}"
                       Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=FIconBrush}"/>
            <ContentPresenter VerticalAlignment="Center" 
                       TextBlock.FontSize="{TemplateBinding FontSize}"/>
        </StackPanel>
        <ControlTemplate.Triggers>
            <!---选中状态-->
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=FIconSelected}" TargetName="icon" ></Setter>
                <Setter Property="Foreground" TargetName="icon" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=PressFIconBrush}"></Setter>
            </Trigger>
            <Trigger Property="IsChecked" Value="{x:Null}">
                <Setter Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=FIconNull}" TargetName="icon" ></Setter>
                <Setter Property="Foreground" TargetName="icon" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=PressFIconBrush}"></Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" TargetName="icon" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=PressFIconBrush}"></Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=FIconSelected}" TargetName="icon" ></Setter>
                <Setter Property="Foreground" TargetName="icon" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=PressFIconBrush}"></Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" TargetName="stackpanel"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--复选框基本样式-->
    <Style x:Key="baseCheckBox" TargetType="{x:Type custom:FCheckBox}">
        <Setter Property="Template" Value="{StaticResource FCheckBox_Template}"></Setter>
        <Setter Property="FIcon" Value="&#xe8c7;"></Setter>
        <Setter Property="FIconNull" Value="&#xe61b;"></Setter>
        <Setter Property="FIconSelected" Value="&#xe66a;"></Setter>
        <Setter Property="FontSize" Value="13"></Setter>
        <Setter Property="Foreground" Value="{StaticResource ColorGrey333}"></Setter>
        <Setter Property="FIconSize" Value="20"></Setter>
        <Setter Property="FIconBrush" Value="{StaticResource ColorGrey555}"></Setter>
        <Setter Property="FIconMargin" Value="0 0 2 0"></Setter>
    </Style>
    <!--默认样式-->
    <Style TargetType="{x:Type custom:FCheckBox}" BasedOn="{StaticResource baseCheckBox}">
        <Setter Property="PressFIconBrush" Value="{StaticResource ColorGrey555}"></Setter>
    </Style>
    <Style x:Key="blueCheckBox" TargetType="{x:Type custom:FCheckBox}" BasedOn="{StaticResource baseCheckBox}">
        <Setter Property="PressFIconBrush" Value="{StaticResource ColorBlue}"></Setter>
    </Style>
    <Style x:Key="greenCheckBox" TargetType="{x:Type custom:FCheckBox}" BasedOn="{StaticResource baseCheckBox}">
        <Setter Property="PressFIconBrush" Value="{StaticResource ColorGreen}"></Setter>
    </Style>
    <Style x:Key="navCheckBox" TargetType="{x:Type custom:FCheckBox}" BasedOn="{StaticResource baseCheckBox}">
        <Setter Property="PressFIconBrush" Value="{StaticResource ColorGreenDark}"></Setter>
    </Style>
    <Style x:Key="warnCheckBox" TargetType="{x:Type custom:FCheckBox}" BasedOn="{StaticResource baseCheckBox}">
        <Setter Property="PressFIconBrush" Value="{StaticResource ColorOrange}"></Setter>
    </Style>
    <Style x:Key="dangerCheckBox" TargetType="{x:Type custom:FCheckBox}" BasedOn="{StaticResource baseCheckBox}">
        <Setter Property="PressFIconBrush" Value="{StaticResource ColorRed}"></Setter>
    </Style>

    <!--BulletCheckBox模板-->
    <ControlTemplate x:Key="BulletCheckBox_Templete" TargetType="{x:Type custom:BulletCheckBox}">
        <Viewbox Stretch="Uniform"  VerticalAlignment="Center" HorizontalAlignment="Center">
            <Border x:Name="border" Width="75" Height="28" Background="{TemplateBinding Background}" SnapsToDevicePixels="True"
                                Margin="{TemplateBinding Margin}" CornerRadius="14">
                <StackPanel Orientation="Horizontal">
                    <!--状态球-->
                    <Border x:Name="state" 
                            Width="24" 
                            Height="24" 
                            Margin="3,2,1,2" 
                            CornerRadius="12" 
                            SnapsToDevicePixels="True"
                            Background="{TemplateBinding Foreground}">
                        <Border.RenderTransform>
                            <TranslateTransform x:Name="transState" X="0"></TranslateTransform>
                        </Border.RenderTransform>
                    </Border>
                    <!--文本框-->
                    <TextBlock Width="40" 
                               Foreground="{TemplateBinding Foreground}" 
                               x:Name="txt" 
                               Text="{TemplateBinding Text}" 
                               VerticalAlignment="Center" 
                               TextAlignment="Center">
                        <TextBlock.RenderTransform>
                            <TranslateTransform x:Name="transTxt" X="0"></TranslateTransform>
                        </TextBlock.RenderTransform>
                    </TextBlock>
                </StackPanel>
            </Border>
        </Viewbox>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Text" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CheckedText}" TargetName="txt"/>
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CheckedForeground}" TargetName="state"/>
                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CheckedForeground}" TargetName="txt"/>
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=CheckedBackground}" TargetName="border"/>
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="transState" Storyboard.TargetProperty="X" To="45" Duration="0:0:0.2" />
                            <DoubleAnimation Storyboard.TargetName="transTxt" Storyboard.TargetProperty="X" To="-24" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="transState" Storyboard.TargetProperty="X" To="0" Duration="0:0:0.2" />
                            <DoubleAnimation Storyboard.TargetName="transTxt" Storyboard.TargetProperty="X" To="0" Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Opacity" Value="0.5" TargetName="border"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--BulletCheckBox基本样式-->
    <Style x:Key="baseBulletCheckBox" TargetType="{x:Type custom:BulletCheckBox}">
        <Setter Property="Template" Value="{StaticResource BulletCheckBox_Templete}"></Setter>
        <Setter Property="FontWeight" Value="Bold"></Setter>
        <Setter Property="FontSize" Value="20"></Setter>
        <Setter Property="Cursor" Value="Hand"></Setter>
        <Setter Property="Width" Value="100"></Setter>
        <Setter Property="Margin" Value="0"></Setter>
        <Setter Property="Background" Value="{StaticResource ColorGreyDDD}"></Setter>
        <Setter Property="Foreground" Value="{StaticResource ColorWhite}"></Setter>
        <Setter Property="CheckedForeground" Value="{StaticResource ColorWhite}"></Setter>
    </Style>
    <!--默认样式-->
    <Style BasedOn="{StaticResource baseBulletCheckBox}" TargetType="{x:Type custom:BulletCheckBox}">
        <Setter Property="CheckedBackground" Value="{StaticResource ColorGreenDark}"></Setter>
    </Style>
    <!--蓝色-->
    <Style x:Key="blueBulletCheckBox" BasedOn="{StaticResource baseBulletCheckBox}" TargetType="{x:Type custom:BulletCheckBox}">
        <Setter Property="CheckedBackground" Value="{StaticResource ColorBlue}"></Setter>
    </Style>
    <!--绿色-->
    <Style x:Key="greenBulletCheckBox" BasedOn="{StaticResource baseBulletCheckBox}" TargetType="{x:Type custom:BulletCheckBox}">
        <Setter Property="CheckedBackground" Value="{StaticResource ColorGreen}"></Setter>
    </Style>
    <!--橙色-->
    <Style x:Key="warnBulletCheckBox" BasedOn="{StaticResource baseBulletCheckBox}" TargetType="{x:Type custom:BulletCheckBox}">
        <Setter Property="CheckedBackground" Value="{StaticResource ColorOrange}"></Setter>
    </Style>
    <!--红色-->
    <Style x:Key="dangerBulletCheckBox" BasedOn="{StaticResource baseBulletCheckBox}" TargetType="{x:Type custom:BulletCheckBox}">
        <Setter Property="CheckedBackground" Value="{StaticResource ColorRed}"></Setter>
    </Style>


    <!--单选按钮模板-->
    <ControlTemplate x:Key="FRadioButton_Template" TargetType="{x:Type custom:FRadioButton}">
        <StackPanel x:Name="stackpanel"  
                    Margin="{TemplateBinding Margin}"
                    Orientation="Horizontal" VerticalAlignment="Center">
            <TextBlock x:Name="icon" SnapsToDevicePixels="False"
                       Style="{StaticResource  iconfont}"
                       Text="&#xe630;"
                       FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=FIconSize}"
                       Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=FIconMargin}"
                       Foreground="{TemplateBinding BorderBrush}"/>
            <ContentPresenter VerticalAlignment="Center" 
                       TextBlock.FontSize="{TemplateBinding FontSize}"/>
        </StackPanel>
        <ControlTemplate.Triggers>
            <!---选中状态-->
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Text" Value="&#xe627;" TargetName="icon" ></Setter>
                <Setter Property="Foreground" TargetName="icon" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=PressFIconBrush}"></Setter>
            </Trigger>
            <Trigger Property="IsChecked" Value="{x:Null}">
                <Setter Property="Text" Value="&#xe630;" TargetName="icon" ></Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" TargetName="icon" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=PressFIconBrush}"></Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Text" Value="&#xe627;" TargetName="icon" ></Setter>
                <Setter Property="Foreground" TargetName="icon" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=PressFIconBrush}"></Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" TargetName="stackpanel"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--单选按钮基本样式-->
    <Style x:Key="baseFRadioButton" TargetType="{x:Type custom:FRadioButton}">
        <Setter Property="BorderBrush" Value="{StaticResource ColorGrey555}"></Setter>
        <Setter Property="Template" Value="{StaticResource FRadioButton_Template}"></Setter>
        <Setter Property="FontSize" Value="13"></Setter>
        <Setter Property="Foreground" Value="{StaticResource ColorGrey333}"></Setter>
        <Setter Property="FIconSize" Value="16"></Setter>
        <Setter Property="FIconMargin" Value="0 0 2 0"></Setter>
    </Style>
    <!--默认样式-->
    <Style TargetType="{x:Type custom:FRadioButton}" BasedOn="{StaticResource baseFRadioButton}">
        <Setter Property="PressFIconBrush" Value="{StaticResource ColorGrey555}"></Setter>
    </Style>
    <Style x:Key="blueRadioButton" TargetType="{x:Type custom:FRadioButton}" BasedOn="{StaticResource baseFRadioButton}">
        <Setter Property="PressFIconBrush" Value="{StaticResource ColorBlue}"></Setter>
    </Style>
    <Style x:Key="greenRadioButton" TargetType="{x:Type custom:FRadioButton}" BasedOn="{StaticResource baseFRadioButton}">
        <Setter Property="PressFIconBrush" Value="{StaticResource ColorGreen}"></Setter>
    </Style>
    <Style x:Key="navRadioButton" TargetType="{x:Type custom:FRadioButton}" BasedOn="{StaticResource baseFRadioButton}">
        <Setter Property="PressFIconBrush" Value="{StaticResource ColorGreenDark}"></Setter>
    </Style>
    <Style x:Key="warnRadioButton" TargetType="{x:Type custom:FRadioButton}" BasedOn="{StaticResource baseFRadioButton}">
        <Setter Property="PressFIconBrush" Value="{StaticResource ColorOrange}"></Setter>
    </Style>
    <Style x:Key="dangerRadioButton" TargetType="{x:Type custom:FRadioButton}" BasedOn="{StaticResource baseFRadioButton}">
        <Setter Property="PressFIconBrush" Value="{StaticResource ColorRed}"></Setter>
    </Style>

    <!--BoxRadioButton模板-->
    <ControlTemplate x:Key="BoxRadioButton_Templete" TargetType="{x:Type custom:BoxRadioButton}">
        <Grid x:Name="grid" VerticalAlignment="Center">
            <Border x:Name="Border" SnapsToDevicePixels="true"
                    BorderThickness="{TemplateBinding BorderThickness}" 
                    BorderBrush="{TemplateBinding BorderBrush}" 
                    Background="{TemplateBinding Background}"
                    Width="{TemplateBinding Width}"
                    Height="{TemplateBinding Height}" 
                    HorizontalAlignment="Center">
                <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" 
                                  Margin="{TemplateBinding Padding}" 
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </Border>
            <TextBlock x:Name="checkState" Text="&#xe61c;" Style="{StaticResource iconfont}"
                       Margin="0 0 0 0"
                       FontSize="14"
                       HorizontalAlignment="Right"
                       Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=SelectedBrush}"
                       VerticalAlignment="Bottom"
                       Visibility="Collapsed">
            </TextBlock>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" Value="Visible" TargetName="checkState" ></Setter>
                <Setter Property="BorderBrush" TargetName="Border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=SelectedBrush}"></Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="BorderBrush" TargetName="Border" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=SelectedBrush}"></Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.5" TargetName="grid" ></Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <!--BoxRadioButton-->
    <Style x:Key="baseBoxRadioButton" TargetType="{x:Type custom:BoxRadioButton}">
        <Setter Property="Padding" Value="10 2"></Setter>
        <Setter Property="Margin" Value="10 0"></Setter>
        <Setter Property="Template" Value="{StaticResource BoxRadioButton_Templete}"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="FontSize" Value="14"></Setter>
        <Setter Property="Foreground" Value="{StaticResource ColorGrey555}"></Setter>
        <Setter Property="BorderBrush" Value="{StaticResource ColorGreyDDD}"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
    </Style>
    <Style TargetType="{x:Type custom:BoxRadioButton}" BasedOn="{StaticResource baseBoxRadioButton}">
        <Setter Property="SelectedBrush" Value="{StaticResource ColorGreenDark}"></Setter>
    </Style>
    <Style x:Key="dangerBoxRadioButton" TargetType="{x:Type custom:BoxRadioButton}" BasedOn="{StaticResource baseBoxRadioButton}">
        <Setter Property="SelectedBrush" Value="{StaticResource ColorRed}"></Setter>
    </Style>
    <Style x:Key="blueBoxRadioButton" TargetType="{x:Type custom:BoxRadioButton}" BasedOn="{StaticResource baseBoxRadioButton}">
        <Setter Property="SelectedBrush" Value="{StaticResource ColorBlue}"></Setter>
    </Style>
    <Style x:Key="warnBoxRadioButton" TargetType="{x:Type custom:BoxRadioButton}" BasedOn="{StaticResource baseBoxRadioButton}">
        <Setter Property="SelectedBrush" Value="{StaticResource ColorOrange}"></Setter>
    </Style>

    <!--ToggleButton-->
    <Style TargetType="ToggleButton" x:Key="stlToggleButton">
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"></ColumnDefinition>
                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="border" Grid.Column="0" MinHeight="25" Width="{TemplateBinding ActualWidth}" Background="Transparent" BorderBrush="#AAA" BorderThickness="1 1 0 1"></Border>
                        <Border Grid.Column="1" Width="22" HorizontalAlignment="Right" 
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding Background}" 
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <Path Data="M0,0L3.5,4 7,0z" Fill="White" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Background}" TargetName="border" ></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--下拉列表项样式-->
    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="ItemBorder" Padding="10 5" Margin="1" HorizontalAlignment="Stretch" BorderThickness="0">
                        <ContentPresenter HorizontalAlignment="Stretch"></ContentPresenter>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="ItemBorder" Value="#EEEEEE"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--组合框-->
    <ControlTemplate x:Key="FCombox_Templete" TargetType="{x:Type ComboBox}">
        <Grid>
            <!--下拉箭头-->
            <ToggleButton BorderThickness="{TemplateBinding BorderThickness}" 
                          BorderBrush="{TemplateBinding BorderBrush}" 
                          Background="{TemplateBinding Background}"
                          Style="{StaticResource stlToggleButton}"
                          Focusable="False"
                          IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                          ClickMode="Press">
            </ToggleButton>
            <!--中间项内容-->
            <ContentPresenter Margin="10 0"  IsHitTestVisible="False" 
                     Content="{TemplateBinding SelectionBoxItem}" 
                     ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                     ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" 
                     VerticalAlignment="Center" 
                     HorizontalAlignment="Stretch" />
            <!--下拉显示面板HorizontalOffset:设置下拉面板的相对位置-->
            <Popup HorizontalOffset="0" VerticalOffset="1" Width="{TemplateBinding ActualWidth}"
                   IsOpen="{TemplateBinding IsDropDownOpen}" 
                   Focusable="False"    
                   PopupAnimation="Slide">
                <Grid SnapsToDevicePixels="True" HorizontalAlignment="Stretch">
                    <Border BorderThickness="1" BorderBrush="#888"
                            HorizontalAlignment="Stretch" Background="#FFF" ></Border>
                    <ScrollViewer SnapsToDevicePixels="True" HorizontalAlignment="Stretch" BorderThickness="0" Padding="0 5">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" HorizontalAlignment="Stretch" />
                    </ScrollViewer>
                </Grid>
            </Popup>
        </Grid>
    </ControlTemplate>

    <!--ComboBoxStyle-->
    <Style x:Key="CustomCombox" TargetType="ComboBox">
        <Setter Property="Template" Value="{StaticResource FCombox_Templete}"></Setter>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"></Setter>
        <Setter Property="Foreground" Value="{StaticResource ColorGrey333}"></Setter>
        <Setter Property="Background" Value="{StaticResource ColorGreenDark}"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="FontSize" Value="15"></Setter>
        <Setter Property="Margin" Value="0"></Setter>
    </Style>

    <!--带有图片的单选按钮模板-->
    <ControlTemplate x:Key="ImageRadioButton_Template" TargetType="{x:Type custom:ImageRadioButton}">
        <Border x:Name="border" Margin="0.1 0" Padding="0"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= Background}" 
                                Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Height}"
                                Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Width}">
            <!--Icon/Text-->
            <StackPanel Orientation="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=ImageOrientation}" 
                        VerticalAlignment="Center"
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
                <Image x:Name="Image" VerticalAlignment="Center" HorizontalAlignment="Center" Width="35" Visibility="Visible" 
									Source="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ImageSource}"
									Margin="0"></Image>
                <TextBlock x:Name="icon" Visibility="Visible" 
                           Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FIconMargin}" 
                           RenderTransformOrigin="0.5,0.5" Style="{StaticResource iconfont}"
                           Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= FIcon}" 
                           FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= FIconSize}" 
                           Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path= Foreground}">
                    <TextBlock.RenderTransform>
                        <RotateTransform x:Name="transIcon" Angle="0"/>
                    </TextBlock.RenderTransform>
                </TextBlock>
                <TextBlock x:Name="txt" VerticalAlignment="Center" HorizontalAlignment="Center"
                           Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Content}"
                           FontSize="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=FontSize}"
                           FontFamily="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=FontFamily}"
                           Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=Foreground}"
                           Margin="{Binding RelativeSource={RelativeSource Mode=TemplatedParent},Path=ImageMargin}"></TextBlock>
            </StackPanel>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="border" Property="Background" >
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0.5 0" EndPoint="0.5 1">
                            <!--<GradientStop Color="#00FFFFFF" Offset="0.1"></GradientStop>-->
                            <GradientStop Color="#22FFFFFF" Offset="1"></GradientStop>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="border" Property="Background" >
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0.5 0" EndPoint="0.5 1">
                            <!--<GradientStop Color="#00FFFFFF" Offset="0.1"></GradientStop>-->
                            <GradientStop Color="#22FFFFFF" Offset="1"></GradientStop>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="FIcon" Value="{x:Null}">
                <Setter TargetName="icon" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="ImageSource" Value="{x:Null}">
                <Setter TargetName="Image" Property="Visibility" Value="Collapsed" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--ImageRadioButton的基本样式-->
    <Style x:Key="baseImageRadioButton" TargetType="{x:Type custom:ImageRadioButton}">
        <Setter Property="Template" Value="{StaticResource ImageRadioButton_Template}"></Setter>
        <Setter Property="Padding" Value="0 8"></Setter>
        <Setter Property="ImageMargin" Value="5"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="FontSize" Value="15"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
        <Setter Property="FIconMargin" Value="5"></Setter>
        <Setter Property="FIconSize" Value="25"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
    </Style>

    <!--默认垂直布局-->
    <Style TargetType="{x:Type custom:ImageRadioButton}" BasedOn="{StaticResource baseImageRadioButton}">
        <Setter Property="Width" Value="100"></Setter>
        <Setter Property="ImageOrientation" Value="Vertical"></Setter>
        <Setter Property="Foreground" Value="{StaticResource ColorWhite}"></Setter>
    </Style>

    <!--默认水平布局-->
    <Style x:Key="hlayoutImageRadioButton" TargetType="{x:Type custom:ImageRadioButton}" BasedOn="{StaticResource baseImageRadioButton}">
        <Setter Property="Width" Value="120"></Setter>
        <Setter Property="ImageOrientation" Value="Horizontal"></Setter>
        <Setter Property="Foreground" Value="{StaticResource ColorWhite}"></Setter>
    </Style>

    <!--navItemImageRadioButton-->
    <Style x:Key="navItemImageRadioButton" TargetType="{x:Type custom:ImageRadioButton}" BasedOn="{StaticResource baseImageRadioButton}">
        <Setter Property="Foreground" Value="{StaticResource ColorWhite}"></Setter>
        <Setter Property="HorizontalAlignment" Value="Stretch"></Setter>
    </Style>

<!-- ==========Test======== -->
</ResourceDictionary>